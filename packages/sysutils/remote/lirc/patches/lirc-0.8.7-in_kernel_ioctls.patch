Index: lirc-0.8.7pre2/drivers/lirc.h
===================================================================
--- lirc-0.8.7pre2.orig/drivers/lirc.h
+++ lirc-0.8.7pre2/drivers/lirc.h
@@ -11,6 +11,9 @@
 #define __USE_LINUX_IOCTL_DEFS
 #include <sys/ioctl.h>
 #endif
+#include <stdint.h>
+
+typedef uint32_t __u32;
 
 /* <obsolete> */
 #define PULSE_BIT       0x01000000
@@ -95,60 +96,60 @@ typedef int lirc_t;
 
 /*** IOCTL commands for lirc driver ***/
 
-#define LIRC_GET_FEATURES              _IOR('i', 0x00000000, unsigned long)
+#define LIRC_GET_FEATURES              _IOR('i', 0x00000000, __u32)
 
-#define LIRC_GET_SEND_MODE             _IOR('i', 0x00000001, unsigned long)
-#define LIRC_GET_REC_MODE              _IOR('i', 0x00000002, unsigned long)
-#define LIRC_GET_SEND_CARRIER          _IOR('i', 0x00000003, unsigned int)
-#define LIRC_GET_REC_CARRIER           _IOR('i', 0x00000004, unsigned int)
-#define LIRC_GET_SEND_DUTY_CYCLE       _IOR('i', 0x00000005, unsigned int)
-#define LIRC_GET_REC_DUTY_CYCLE        _IOR('i', 0x00000006, unsigned int)
-#define LIRC_GET_REC_RESOLUTION        _IOR('i', 0x00000007, unsigned int)
-
-#define LIRC_GET_MIN_TIMEOUT           _IOR('i', 0x00000008, lirc_t)
-#define LIRC_GET_MAX_TIMEOUT           _IOR('i', 0x00000009, lirc_t)
-
-#define LIRC_GET_MIN_FILTER_PULSE      _IOR('i', 0x0000000a, lirc_t)
-#define LIRC_GET_MAX_FILTER_PULSE      _IOR('i', 0x0000000b, lirc_t)
-#define LIRC_GET_MIN_FILTER_SPACE      _IOR('i', 0x0000000c, lirc_t)
-#define LIRC_GET_MAX_FILTER_SPACE      _IOR('i', 0x0000000d, lirc_t)
+#define LIRC_GET_SEND_MODE             _IOR('i', 0x00000001, __u32)
+#define LIRC_GET_REC_MODE              _IOR('i', 0x00000002, __u32)
+#define LIRC_GET_SEND_CARRIER          _IOR('i', 0x00000003, __u32)
+#define LIRC_GET_REC_CARRIER           _IOR('i', 0x00000004, __u32)
+#define LIRC_GET_SEND_DUTY_CYCLE       _IOR('i', 0x00000005, __u32)
+#define LIRC_GET_REC_DUTY_CYCLE        _IOR('i', 0x00000006, __u32)
+#define LIRC_GET_REC_RESOLUTION        _IOR('i', 0x00000007, __u32)
+
+#define LIRC_GET_MIN_TIMEOUT           _IOR('i', 0x00000008, __u32)
+#define LIRC_GET_MAX_TIMEOUT           _IOR('i', 0x00000009, __u32)
+
+#define LIRC_GET_MIN_FILTER_PULSE      _IOR('i', 0x0000000a, __u32)
+#define LIRC_GET_MAX_FILTER_PULSE      _IOR('i', 0x0000000b, __u32)
+#define LIRC_GET_MIN_FILTER_SPACE      _IOR('i', 0x0000000c, __u32)
+#define LIRC_GET_MAX_FILTER_SPACE      _IOR('i', 0x0000000d, __u32)
 
 /* code length in bits, currently only for LIRC_MODE_LIRCCODE */
-#define LIRC_GET_LENGTH                _IOR('i', 0x0000000f, unsigned long)
+#define LIRC_GET_LENGTH                _IOR('i', 0x0000000f, __u32)
 
 /* all values set should be reset by the driver when the device is
    reopened */
 
 /* obsolete: drivers only support one mode */
-#define LIRC_SET_SEND_MODE             _IOW('i', 0x00000011, unsigned long)
+#define LIRC_SET_SEND_MODE             _IOW('i', 0x00000011, __u32)
 /* obsolete: drivers only support one mode */
-#define LIRC_SET_REC_MODE              _IOW('i', 0x00000012, unsigned long)
+#define LIRC_SET_REC_MODE              _IOW('i', 0x00000012, __u32)
 /* Note: these can reset the according pulse_width */
-#define LIRC_SET_SEND_CARRIER          _IOW('i', 0x00000013, unsigned int)
-#define LIRC_SET_REC_CARRIER           _IOW('i', 0x00000014, unsigned int)
-#define LIRC_SET_SEND_DUTY_CYCLE       _IOW('i', 0x00000015, unsigned int)
-#define LIRC_SET_REC_DUTY_CYCLE        _IOW('i', 0x00000016, unsigned int)
-#define LIRC_SET_TRANSMITTER_MASK      _IOW('i', 0x00000017, unsigned int)
+#define LIRC_SET_SEND_CARRIER          _IOW('i', 0x00000013, __u32)
+#define LIRC_SET_REC_CARRIER           _IOW('i', 0x00000014, __u32)
+#define LIRC_SET_SEND_DUTY_CYCLE       _IOW('i', 0x00000015, __u32)
+#define LIRC_SET_REC_DUTY_CYCLE        _IOW('i', 0x00000016, __u32)
+#define LIRC_SET_TRANSMITTER_MASK      _IOW('i', 0x00000017, __u32)
 
 /* a value of 0 disables all hardware timeouts and data should be
    reported as soon as possible */
-#define LIRC_SET_REC_TIMEOUT           _IOW('i', 0x00000018, lirc_t)
+#define LIRC_SET_REC_TIMEOUT           _IOW('i', 0x00000018, __u32)
 /* 1 enables, 0 disables timeout reports in MODE2 */
-#define LIRC_SET_REC_TIMEOUT_REPORTS   _IOW('i', 0x00000019, unsigned int)
+#define LIRC_SET_REC_TIMEOUT_REPORTS   _IOW('i', 0x00000019, __u32)
 
 /* pulses shorter than this are filtered out by hardware (software
    emulation in lirc_dev/lircd?) */
-#define LIRC_SET_REC_FILTER_PULSE      _IOW('i', 0x0000001a, lirc_t)
+#define LIRC_SET_REC_FILTER_PULSE      _IOW('i', 0x0000001a, __u32)
 /* spaces shorter than this are filtered out by hardware (software
    emulation in lirc_dev/lircd?) */
-#define LIRC_SET_REC_FILTER_SPACE      _IOW('i', 0x0000001b, lirc_t)
+#define LIRC_SET_REC_FILTER_SPACE      _IOW('i', 0x0000001b, __u32)
 /* if filter cannot be set independently for pulse/space, this should
    be used */
-#define LIRC_SET_REC_FILTER            _IOW('i', 0x0000001c, lirc_t)
+#define LIRC_SET_REC_FILTER            _IOW('i', 0x0000001c, __u32)
 
 /* if enabled from the next key press on the driver will send
    LIRC_MODE2_FREQUENCY packets */
-#define LIRC_SET_MEASURE_CARRIER_MODE  _IOW('i', 0x0000001d, unsigned int)
+#define LIRC_SET_MEASURE_CARRIER_MODE  _IOW('i', 0x0000001d, __u32)
 
 /*
  * to set a range use
@@ -157,8 +158,8 @@ typedef int lirc_t;
  * LIRC_SET_REC_DUTY_CYCLE/LIRC_SET_REC_CARRIER with the upper bound
  */
 
-#define LIRC_SET_REC_DUTY_CYCLE_RANGE  _IOW('i', 0x0000001e, unsigned int)
-#define LIRC_SET_REC_CARRIER_RANGE     _IOW('i', 0x0000001f, unsigned int)
+#define LIRC_SET_REC_DUTY_CYCLE_RANGE  _IOW('i', 0x0000001e, __u32)
+#define LIRC_SET_REC_CARRIER_RANGE     _IOW('i', 0x0000001f, __u32)
 
 #define LIRC_NOTIFY_DECODE             _IO('i', 0x00000020)
 
